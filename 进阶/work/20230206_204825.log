2023-02-06 20:48:25,336 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 | packaged by conda-forge | (default, Feb  1 2023, 16:01:55) [GCC 11.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-06 20:48:25,337 - mmcls - INFO - Distributed training: False
2023-02-06 20:48:25,421 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet_CIFAR',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'CIFAR10'
img_norm_cfg = dict(
    mean=[125.307, 122.961, 113.8575],
    std=[51.5865, 50.847, 51.255],
    to_rgb=False)
train_pipeline = [
    dict(type='RandomCrop', size=32, padding=4),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=2,
    train=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(type='RandomCrop', size=32, padding=4),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True),
    test=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True))
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[4, 8])
runner = dict(type='EpochBasedRunner', max_epochs=10)
checkpoint_config = dict(interval=10)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet50_b16x8_cifar10_20210528-f54bfad9.pth'
resume_from = None
workflow = [('train', 1)]
evaluation = dict(
    interval=1,
    metric=['accuracy', 'precision', 'f1_score'],
    metric_options=dict(topk=(1, )))
work_dir = 'work/CIFAR-10'
gpu_ids = [0]

2023-02-06 20:48:25,423 - mmcls - INFO - Set random seed to 1862314865, deterministic: False
2023-02-06 20:48:25,574 - mmcls - INFO - initialize ResNet_CIFAR with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 20:48:25,740 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 20:48:31,554 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet50_b16x8_cifar10_20210528-f54bfad9.pth
2023-02-06 20:48:31,796 - mmcls - INFO - Start running, host: scz0bcw@g0009, work_dir: /data/run01/scz0bcw/mmclassification/work/CIFAR-10
2023-02-06 20:48:31,797 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 20:48:31,797 - mmcls - INFO - workflow: [('train', 1)], max: 10 epochs
2023-02-06 20:48:31,797 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0bcw/mmclassification/work/CIFAR-10 by HardDiskBackend.
2023-02-06 20:48:40,505 - mmcls - INFO - Epoch [1][100/782]	lr: 1.000e-02, eta: 0:11:10, time: 0.087, data_time: 0.022, memory: 1867, loss: 0.0004
2023-02-06 20:48:46,797 - mmcls - INFO - Epoch [1][200/782]	lr: 1.000e-02, eta: 0:09:30, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:48:53,098 - mmcls - INFO - Epoch [1][300/782]	lr: 1.000e-02, eta: 0:08:53, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:48:59,411 - mmcls - INFO - Epoch [1][400/782]	lr: 1.000e-02, eta: 0:08:31, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0003
2023-02-06 20:49:05,729 - mmcls - INFO - Epoch [1][500/782]	lr: 1.000e-02, eta: 0:08:16, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:49:12,060 - mmcls - INFO - Epoch [1][600/782]	lr: 1.000e-02, eta: 0:08:04, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:49:18,395 - mmcls - INFO - Epoch [1][700/782]	lr: 1.000e-02, eta: 0:07:53, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:49:26,790 - mmcls - INFO - Epoch(val) [1][157]	accuracy_top-1: 95.5700, precision: 95.5703, f1_score: 95.5670
2023-02-06 20:49:35,153 - mmcls - INFO - Epoch [2][100/782]	lr: 1.000e-02, eta: 0:07:11, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0005
2023-02-06 20:49:41,502 - mmcls - INFO - Epoch [2][200/782]	lr: 1.000e-02, eta: 0:07:06, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:49:47,850 - mmcls - INFO - Epoch [2][300/782]	lr: 1.000e-02, eta: 0:07:00, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:49:54,202 - mmcls - INFO - Epoch [2][400/782]	lr: 1.000e-02, eta: 0:06:55, time: 0.064, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:50:00,553 - mmcls - INFO - Epoch [2][500/782]	lr: 1.000e-02, eta: 0:06:49, time: 0.064, data_time: 0.000, memory: 1867, loss: 0.0012
2023-02-06 20:50:06,907 - mmcls - INFO - Epoch [2][600/782]	lr: 1.000e-02, eta: 0:06:43, time: 0.064, data_time: 0.000, memory: 1867, loss: 0.0007
2023-02-06 20:50:13,233 - mmcls - INFO - Epoch [2][700/782]	lr: 1.000e-02, eta: 0:06:37, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:50:21,662 - mmcls - INFO - Epoch(val) [2][157]	accuracy_top-1: 95.1200, precision: 95.1284, f1_score: 95.1075
2023-02-06 20:50:30,054 - mmcls - INFO - Epoch [3][100/782]	lr: 1.000e-02, eta: 0:06:14, time: 0.084, data_time: 0.020, memory: 1867, loss: 0.0007
2023-02-06 20:50:36,415 - mmcls - INFO - Epoch [3][200/782]	lr: 1.000e-02, eta: 0:06:09, time: 0.064, data_time: 0.000, memory: 1867, loss: 0.0009
2023-02-06 20:50:42,752 - mmcls - INFO - Epoch [3][300/782]	lr: 1.000e-02, eta: 0:06:04, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0009
2023-02-06 20:50:49,087 - mmcls - INFO - Epoch [3][400/782]	lr: 1.000e-02, eta: 0:05:58, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:50:55,424 - mmcls - INFO - Epoch [3][500/782]	lr: 1.000e-02, eta: 0:05:53, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0008
2023-02-06 20:51:01,759 - mmcls - INFO - Epoch [3][600/782]	lr: 1.000e-02, eta: 0:05:47, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:51:08,095 - mmcls - INFO - Epoch [3][700/782]	lr: 1.000e-02, eta: 0:05:42, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:51:16,313 - mmcls - INFO - Epoch(val) [3][157]	accuracy_top-1: 95.4700, precision: 95.4903, f1_score: 95.4753
2023-02-06 20:51:24,679 - mmcls - INFO - Epoch [4][100/782]	lr: 1.000e-02, eta: 0:05:24, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0005
2023-02-06 20:51:31,008 - mmcls - INFO - Epoch [4][200/782]	lr: 1.000e-02, eta: 0:05:19, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0014
2023-02-06 20:51:37,336 - mmcls - INFO - Epoch [4][300/782]	lr: 1.000e-02, eta: 0:05:13, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:51:43,663 - mmcls - INFO - Epoch [4][400/782]	lr: 1.000e-02, eta: 0:05:08, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0011
2023-02-06 20:51:49,990 - mmcls - INFO - Epoch [4][500/782]	lr: 1.000e-02, eta: 0:05:02, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:51:56,322 - mmcls - INFO - Epoch [4][600/782]	lr: 1.000e-02, eta: 0:04:56, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:52:02,653 - mmcls - INFO - Epoch [4][700/782]	lr: 1.000e-02, eta: 0:04:51, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:52:10,859 - mmcls - INFO - Epoch(val) [4][157]	accuracy_top-1: 95.2500, precision: 95.2471, f1_score: 95.2444
2023-02-06 20:52:19,214 - mmcls - INFO - Epoch [5][100/782]	lr: 1.000e-03, eta: 0:04:36, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0006
2023-02-06 20:52:25,543 - mmcls - INFO - Epoch [5][200/782]	lr: 1.000e-03, eta: 0:04:30, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0007
2023-02-06 20:52:31,871 - mmcls - INFO - Epoch [5][300/782]	lr: 1.000e-03, eta: 0:04:24, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:52:38,202 - mmcls - INFO - Epoch [5][400/782]	lr: 1.000e-03, eta: 0:04:19, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:52:44,531 - mmcls - INFO - Epoch [5][500/782]	lr: 1.000e-03, eta: 0:04:13, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0013
2023-02-06 20:52:50,860 - mmcls - INFO - Epoch [5][600/782]	lr: 1.000e-03, eta: 0:04:07, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0008
2023-02-06 20:52:57,192 - mmcls - INFO - Epoch [5][700/782]	lr: 1.000e-03, eta: 0:04:01, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0011
2023-02-06 20:53:05,405 - mmcls - INFO - Epoch(val) [5][157]	accuracy_top-1: 95.3200, precision: 95.3255, f1_score: 95.3184
2023-02-06 20:53:13,774 - mmcls - INFO - Epoch [6][100/782]	lr: 1.000e-03, eta: 0:03:48, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0005
2023-02-06 20:53:20,108 - mmcls - INFO - Epoch [6][200/782]	lr: 1.000e-03, eta: 0:03:42, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:53:26,438 - mmcls - INFO - Epoch [6][300/782]	lr: 1.000e-03, eta: 0:03:36, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:53:32,769 - mmcls - INFO - Epoch [6][400/782]	lr: 1.000e-03, eta: 0:03:31, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:53:39,100 - mmcls - INFO - Epoch [6][500/782]	lr: 1.000e-03, eta: 0:03:25, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:53:45,438 - mmcls - INFO - Epoch [6][600/782]	lr: 1.000e-03, eta: 0:03:19, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:53:51,772 - mmcls - INFO - Epoch [6][700/782]	lr: 1.000e-03, eta: 0:03:13, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:54:00,008 - mmcls - INFO - Epoch(val) [6][157]	accuracy_top-1: 95.3500, precision: 95.3566, f1_score: 95.3501
2023-02-06 20:54:08,376 - mmcls - INFO - Epoch [7][100/782]	lr: 1.000e-03, eta: 0:03:01, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0005
2023-02-06 20:54:14,716 - mmcls - INFO - Epoch [7][200/782]	lr: 1.000e-03, eta: 0:02:55, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:54:21,056 - mmcls - INFO - Epoch [7][300/782]	lr: 1.000e-03, eta: 0:02:49, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:54:27,393 - mmcls - INFO - Epoch [7][400/782]	lr: 1.000e-03, eta: 0:02:43, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0007
2023-02-06 20:54:33,729 - mmcls - INFO - Epoch [7][500/782]	lr: 1.000e-03, eta: 0:02:37, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:54:40,068 - mmcls - INFO - Epoch [7][600/782]	lr: 1.000e-03, eta: 0:02:32, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:54:46,409 - mmcls - INFO - Epoch [7][700/782]	lr: 1.000e-03, eta: 0:02:26, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:54:54,793 - mmcls - INFO - Epoch(val) [7][157]	accuracy_top-1: 95.3800, precision: 95.3844, f1_score: 95.3775
2023-02-06 20:55:03,155 - mmcls - INFO - Epoch [8][100/782]	lr: 1.000e-03, eta: 0:02:14, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0004
2023-02-06 20:55:09,492 - mmcls - INFO - Epoch [8][200/782]	lr: 1.000e-03, eta: 0:02:08, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:55:15,824 - mmcls - INFO - Epoch [8][300/782]	lr: 1.000e-03, eta: 0:02:02, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:55:22,157 - mmcls - INFO - Epoch [8][400/782]	lr: 1.000e-03, eta: 0:01:56, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:55:28,488 - mmcls - INFO - Epoch [8][500/782]	lr: 1.000e-03, eta: 0:01:50, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:55:34,823 - mmcls - INFO - Epoch [8][600/782]	lr: 1.000e-03, eta: 0:01:44, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0003
2023-02-06 20:55:41,157 - mmcls - INFO - Epoch [8][700/782]	lr: 1.000e-03, eta: 0:01:38, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0007
2023-02-06 20:55:49,823 - mmcls - INFO - Epoch(val) [8][157]	accuracy_top-1: 95.3300, precision: 95.3356, f1_score: 95.3313
2023-02-06 20:55:58,183 - mmcls - INFO - Epoch [9][100/782]	lr: 1.000e-04, eta: 0:01:27, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0004
2023-02-06 20:56:04,511 - mmcls - INFO - Epoch [9][200/782]	lr: 1.000e-04, eta: 0:01:21, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0007
2023-02-06 20:56:10,844 - mmcls - INFO - Epoch [9][300/782]	lr: 1.000e-04, eta: 0:01:15, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:56:17,173 - mmcls - INFO - Epoch [9][400/782]	lr: 1.000e-04, eta: 0:01:09, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:56:23,502 - mmcls - INFO - Epoch [9][500/782]	lr: 1.000e-04, eta: 0:01:03, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:56:29,830 - mmcls - INFO - Epoch [9][600/782]	lr: 1.000e-04, eta: 0:00:57, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:56:36,157 - mmcls - INFO - Epoch [9][700/782]	lr: 1.000e-04, eta: 0:00:51, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0011
2023-02-06 20:56:44,479 - mmcls - INFO - Epoch(val) [9][157]	accuracy_top-1: 95.4200, precision: 95.4221, f1_score: 95.4189
2023-02-06 20:56:52,837 - mmcls - INFO - Epoch [10][100/782]	lr: 1.000e-04, eta: 0:00:40, time: 0.083, data_time: 0.020, memory: 1867, loss: 0.0008
2023-02-06 20:56:59,168 - mmcls - INFO - Epoch [10][200/782]	lr: 1.000e-04, eta: 0:00:34, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0006
2023-02-06 20:57:05,500 - mmcls - INFO - Epoch [10][300/782]	lr: 1.000e-04, eta: 0:00:28, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0005
2023-02-06 20:57:11,834 - mmcls - INFO - Epoch [10][400/782]	lr: 1.000e-04, eta: 0:00:22, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:57:18,169 - mmcls - INFO - Epoch [10][500/782]	lr: 1.000e-04, eta: 0:00:16, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:57:24,509 - mmcls - INFO - Epoch [10][600/782]	lr: 1.000e-04, eta: 0:00:10, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0004
2023-02-06 20:57:30,845 - mmcls - INFO - Epoch [10][700/782]	lr: 1.000e-04, eta: 0:00:04, time: 0.063, data_time: 0.000, memory: 1867, loss: 0.0012
2023-02-06 20:57:36,000 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-06 20:57:39,614 - mmcls - INFO - Epoch(val) [10][157]	accuracy_top-1: 95.3800, precision: 95.3798, f1_score: 95.3778
